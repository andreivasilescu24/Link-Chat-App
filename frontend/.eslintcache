[{"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/index.js":"1","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/reportWebVitals.js":"2","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/App/index.js":"3","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/constants.ts":"4","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/SocketService.ts":"5","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/context/ChatContext.ts":"6","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/context/UserContext.tsx":"7","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Signup/index.tsx":"8","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/NotFound/index.tsx":"9","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Login/index.tsx":"10","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Room/index.tsx":"11","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/Http.ts":"12","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/Axios.ts":"13","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Sidebar/index.tsx":"14","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/NewRoom/index.tsx":"15","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Chat/index.tsx":"16","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/GeneralSnackbar/index.tsx":"17","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/RoomDetails/index.tsx":"18","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ConfirmationDialog/index.tsx":"19","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ChatFooter/index.tsx":"20","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ChatHeader/index.tsx":"21","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarHeader/index.tsx":"22","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarRooms/index.tsx":"23"},{"size":460,"mtime":1715546215991,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1715546215991,"results":"26","hashOfConfig":"25"},{"size":1448,"mtime":1715546215987,"results":"27","hashOfConfig":"25"},{"size":2065,"mtime":1715550741809,"results":"28","hashOfConfig":"25"},{"size":1473,"mtime":1715546215991,"results":"29","hashOfConfig":"25"},{"size":262,"mtime":1715546215991,"results":"30","hashOfConfig":"25"},{"size":416,"mtime":1715546215991,"results":"31","hashOfConfig":"25"},{"size":2635,"mtime":1715551433166,"results":"32","hashOfConfig":"25"},{"size":180,"mtime":1715546215987,"results":"33","hashOfConfig":"25"},{"size":1815,"mtime":1715550994118,"results":"34","hashOfConfig":"25"},{"size":2550,"mtime":1715549170720,"results":"35","hashOfConfig":"25"},{"size":2989,"mtime":1715546215991,"results":"36","hashOfConfig":"25"},{"size":410,"mtime":1715546215991,"results":"37","hashOfConfig":"25"},{"size":1051,"mtime":1715550611563,"results":"38","hashOfConfig":"25"},{"size":1998,"mtime":1715548606389,"results":"39","hashOfConfig":"25"},{"size":3047,"mtime":1715548536604,"results":"40","hashOfConfig":"25"},{"size":937,"mtime":1715548053110,"results":"41","hashOfConfig":"25"},{"size":3630,"mtime":1715547519047,"results":"42","hashOfConfig":"25"},{"size":1022,"mtime":1715546215987,"results":"43","hashOfConfig":"25"},{"size":1213,"mtime":1715550544009,"results":"44","hashOfConfig":"25"},{"size":683,"mtime":1715547357756,"results":"45","hashOfConfig":"25"},{"size":1843,"mtime":1715550923912,"results":"46","hashOfConfig":"25"},{"size":1272,"mtime":1715550766077,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u68nf0",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"79"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"79"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/index.js",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/reportWebVitals.js",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/App/index.js",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/constants.ts",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/SocketService.ts",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/context/ChatContext.ts",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/context/UserContext.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Signup/index.tsx",["98","99"],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/NotFound/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Login/index.tsx",["100","101","102"],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Room/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/Http.ts",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/Axios.ts",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Sidebar/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/NewRoom/index.tsx",["103","104","105","106","107","108","109"],"import React, { useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n} from \"@material-ui/core\";\nimport chatHttp from \"../../services/Http\";\nimport \"./style.css\";\nimport { useChat } from \"../../context/ChatContext\";\nimport { useUser } from \"../../context/UserContext\";\nimport { RoomPopulated } from \"../../types\";\n\nexport interface NewRoomProps {\n  open: boolean;\n  onClose: (value: null | RoomPopulated) => void;\n}\n\nfunction NewRoom({ open, onClose }: NewRoomProps) {\n  const [isNew, setisNew] = useState(true);\n  const [description, setDescription] = useState(\"\");\n  const [roomCode, setRoomCode] = useState(\"\");\n  const chatSocket = useChat();\n  const { userDetails } = useUser();\n\n  const handleClose = (val: null | RoomPopulated) => {\n    onClose(val);\n  };\n\n  const proceed = async (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    e.preventDefault();\n    handleClose(null);\n  };\n\n  return (\n    <Dialog\n      onClose={() => handleClose(null)}\n      aria-labelledby=\"new-room-dialog\"\n      open={open}\n      className=\"newRoom\"\n    >\n      <DialogTitle id=\"new-room-dialog\">New Room</DialogTitle>\n      <DialogContent className=\"newRoom__content\">\n        <form>\n          <ButtonGroup className=\"newRoom__type\" color=\"primary\">\n            <Button\n              onClick={() => setisNew(true)}\n              className={`newRoom__button ${\n                isNew && \"newRoom__button--selected\"\n              }`}\n            >\n              Create Room\n            </Button>\n            <Button\n              onClick={() => setisNew(false)}\n              className={`newRoom__button ${\n                !isNew && \"newRoom__button--selected\"\n              }`}\n            >\n              Join Room\n            </Button>\n          </ButtonGroup>\n\n          {isNew ? (\n            <textarea rows={3} placeholder=\"Room Description\" />\n          ) : (\n            <input type=\"text\" placeholder=\"Room Code\" />\n          )}\n\n          <Button\n            onClick={proceed}\n            type=\"submit\"\n            className=\"secondary\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n          >\n            Proceed\n          </Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default NewRoom;\n",["110","111"],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Chat/index.tsx",["112","113","114"],"import { Avatar } from '@material-ui/core';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Scrollbar from 'react-scrollbars-custom';\nimport './style.css';\nimport { MessagePopulated } from '../../types';\nimport chatHttp from '../../services/Http';\nimport { parseISO, differenceInCalendarDays, format, formatDistanceToNow, set } from 'date-fns';\nimport PersonIcon from '@material-ui/icons/Person';\nimport { useChat } from '../../context/ChatContext';\nimport { useUser } from '../../context/UserContext';\nimport ChatHeader from '../ChatHeader';\nimport ChatFooter from '../ChatFooter';\n\nconst messageData = [\n\t{\n\t\tcontent: 'Hello',\n\t\tuser: {\n\t\t\tusername: 'Chatbot'\n\t\t},\n\t\tcreatedAt: '2021-02-01T12:00:00.000Z',\n\t\troomCode: 'AjXcBW'\n\n\t},\n\n\t{\n\t\tcontent: 'Hi',\n\t\tuser: {\n\t\t\tusername: 'Chatbot1'\n\t\t},\n\t\tcreatedAt: '2021-02-01T12:00:00.000Z',\n\t\troomCode: 'AjXcBW'\n\t},\n\n\t{\n\t\tcontent: 'How are you?',\n\t\tuser: {\n\t\t\tusername: 'Chatbot2'\n\t\t},\n\t\tcreatedAt: '2021-02-01T12:00:00.000Z',\n\t\troomCode: 'AjXcBW'\n\t},\n\n\t{\n\t\tcontent: 'I am fine, thank you',\n\t\tuser: {\n\t\t\tusername: 'Chatbot3'\n\t\t},\n\t\tcreatedAt: '2021-02-01T12:00:00.000Z',\n\t\troomCode: 'AjXcBW'\n\t},\n\n\t{\n\t\tcontent: 'Good to hear',\n\t\tuser: {\n\t\t\tusername: 'Chatbot4'\n\t\t},\n\t\tcreatedAt: '2021-02-01T12:00:00.000Z',\n\t\troomCode: 'AjXcBW'\n\t},\n\n\t{\n\t\tcontent: 'Goodbye',\n\t\tuser: {\n\t\t\tusername: 'Chatbot5'\n\t\t},\n\t\tcreatedAt: '2021-02-01T12:00:00.000Z',\n\t\troomCode: 'AjXcBW'\n\t}\n];\n\n\n\nexport interface ChatProps {\n\troomCode: string;\n}\n\nconst Chat = ({ roomCode }: ChatProps) => {\n\tconst [ messages, setMessages ] = useState([] as MessagePopulated[]);\n\t// const chatSocket = useChat();\n\tconst { userDetails } = useUser();\n\tconst setRef = useCallback((node) => {\n\t\tif (node) {\n\t\t\tnode.scrollIntoView({ smooth: true });\n\t\t}\n\t}, []);\n\n\tuseEffect(\n\t\t() => {\n\t\t\tsetMessages(messageData);\n\t\t},\n\t\t[ roomCode ]\n\t);\n\n\tconst formatDate = (date: Date) => {\n\t\treturn differenceInCalendarDays(new Date(), date) > 2\n\t\t\t? format(date, 'EEE MMM d h:m b')\n\t\t\t: formatDistanceToNow(date, { addSuffix: true });\n\t};\n\n\treturn (\n\t\t<div className=\"chat\">\n\t\t\t<ChatHeader roomCode={roomCode} messages={messages} formatDate={formatDate} />\n\t\t\t<div className=\"chat__body\">\n\t\t\t\t<Scrollbar className=\"chat__scrollbar\">\n\t\t\t\t\t<div className=\"chat__main\">\n\t\t\t\t\t\t{messages.map(({ content, user, createdAt }, i) => {\n\t\t\t\t\t\t\tconst lastMessage = messages.length - 1 === i;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName={`chat__block ${userDetails.username === user.username &&\n\t\t\t\t\t\t\t\t\t\t'chat__block--sender'} ${user.username === 'Chatbot' && 'chat__block--bot'}`}\n\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<div className=\"message__block\">\n\t\t\t\t\t\t\t\t\t\t<Avatar>\n\t\t\t\t\t\t\t\t\t\t\t{user.firstName && user.lastName ? (\n\t\t\t\t\t\t\t\t\t\t\t\tuser.firstName.charAt(0) + user.lastName.charAt(0)\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<PersonIcon />\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t\t\t\t<p ref={lastMessage ? setRef : null} className=\"chat__message\">\n\t\t\t\t\t\t\t\t\t\t\t<span className=\"header__text chat__person\">\n\t\t\t\t\t\t\t\t\t\t\t\t{userDetails.username === user.username ? 'You' : user.username}\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t{content}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<span className=\"chat__timestamp\">{formatDate(parseISO(createdAt))}</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</Scrollbar>\n\t\t\t</div>\n\t\t\t<ChatFooter roomCode={roomCode} loggedInUser={userDetails} />\n\t\t</div>\n\t);\n};\n\nexport default Chat;\n","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/GeneralSnackbar/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/RoomDetails/index.tsx",["115"],"import React, { useState } from \"react\";\nimport \"./style.css\";\nimport {\n  Avatar,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport ConfirmationDialog from \"../ConfirmationDialog\";\nimport { useUser } from \"../../context/UserContext\";\nimport PhotoIcon from \"@material-ui/icons/Photo\";\nimport MeetingRoomIcon from \"@material-ui/icons/MeetingRoom\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport GroupIcon from \"@material-ui/icons/Group\";\nimport { RoomPopulated, RoomUserPopulated } from \"../../types\";\n\nexport interface RoomDetailsProps {\n  roomDetails: RoomPopulated;\n  onRoomLeave: (code: string) => void;\n}\n\nfunction RoomDetails({ roomDetails, onRoomLeave }: RoomDetailsProps) {\n  const { code, description, users } = roomDetails;\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState(\"\");\n  const [type, setType] = useState(\"Leave\");\n  const { userDetails } = useUser();\n\n  const openDialog = (type: string) => {\n    setIsOpen(true);\n    setType(type);\n    if (type === \"Leave\") {\n      setContent(\n        \"You will not be able to receive messeges sent in this room anymore. Other users in the room will also be notified when you leave.\"\n      );\n    } else {\n      setContent(\"You will not be able to revert this deletion.\");\n    }\n  };\n\n  const handleModalClose = async (willProceed: boolean) => {\n    try {\n      setIsOpen(false);\n      if (willProceed) {\n        if (type === \"Leave\") {\n          // await chatHttp.leaveRoom({ roomCode: code });\n          onRoomLeave(code);\n        } else {\n          // await chatHttp.deleteRoom({ roomCode: code });\n        }\n      }\n    } catch (e) {\n      console.log(e.response.data);\n    }\n  };\n\n  const generateOptions = () => {\n    const ROOM_OPTIONS = [\n      { label: \"Change Group Photo\", icon: <PhotoIcon />, adminOnly: false },\n      {\n        label: \"Leave Group\",\n        icon: <MeetingRoomIcon />,\n        adminOnly: false,\n        action: () => openDialog(\"Leave\"),\n      },\n      {\n        label: \"Delete Group\",\n        icon: <DeleteIcon />,\n        adminOnly: true,\n        action: () => openDialog(\"Delete\"),\n      },\n    ];\n    return ROOM_OPTIONS.map(({ label, icon, adminOnly, action }, i) => {\n      return (\n        (!adminOnly ||\n          (adminOnly && users[0].user.username === userDetails.username)) && (\n          <ListItem key={i} button onClick={action}>\n            <ListItemIcon>{icon}</ListItemIcon>\n            <ListItemText primary={label} />\n          </ListItem>\n        )\n      );\n    });\n  };\n\n  const generateUserList = () => {\n    return users.map(({ user }: RoomUserPopulated) => {\n      const { username, firstName, lastName } = user;\n      return (\n        <ListItem key={username}>\n          <ListItemAvatar>\n            <Avatar>\n              {firstName && lastName ? (\n                firstName.charAt(0) + lastName.charAt(0)\n              ) : (\n                <PersonIcon />\n              )}\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={`${firstName} ${lastName}`}\n            secondary={username}\n          />\n        </ListItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"room__details\">\n      <Avatar className=\"avatar--large\">\n        <GroupIcon />\n      </Avatar>\n      <h1>{code}</h1>\n      <p>{description}</p>\n      <List>{generateOptions()}</List>\n      <ConfirmationDialog\n        open={isOpen}\n        onClose={handleModalClose}\n        content={content}\n      />\n    </div>\n  );\n}\n\nexport default RoomDetails;\n","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ConfirmationDialog/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ChatFooter/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ChatHeader/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarHeader/index.tsx",["116","117"],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarRooms/index.tsx",[],{"ruleId":"118","severity":1,"message":"119","line":4,"column":8,"nodeType":"120","messageId":"121","endLine":4,"endColumn":16},{"ruleId":"118","severity":1,"message":"122","line":7,"column":10,"nodeType":"120","messageId":"121","endLine":7,"endColumn":13},{"ruleId":"118","severity":1,"message":"119","line":3,"column":8,"nodeType":"120","messageId":"121","endLine":3,"endColumn":16},{"ruleId":"118","severity":1,"message":"123","line":15,"column":10,"nodeType":"120","messageId":"121","endLine":15,"endColumn":21},{"ruleId":"118","severity":1,"message":"124","line":15,"column":23,"nodeType":"120","messageId":"121","endLine":15,"endColumn":37},{"ruleId":"118","severity":1,"message":"119","line":9,"column":8,"nodeType":"120","messageId":"121","endLine":9,"endColumn":16},{"ruleId":"118","severity":1,"message":"125","line":22,"column":10,"nodeType":"120","messageId":"121","endLine":22,"endColumn":21},{"ruleId":"118","severity":1,"message":"126","line":22,"column":23,"nodeType":"120","messageId":"121","endLine":22,"endColumn":37},{"ruleId":"118","severity":1,"message":"127","line":23,"column":10,"nodeType":"120","messageId":"121","endLine":23,"endColumn":18},{"ruleId":"118","severity":1,"message":"128","line":23,"column":20,"nodeType":"120","messageId":"121","endLine":23,"endColumn":31},{"ruleId":"118","severity":1,"message":"129","line":24,"column":9,"nodeType":"120","messageId":"121","endLine":24,"endColumn":19},{"ruleId":"118","severity":1,"message":"123","line":25,"column":11,"nodeType":"120","messageId":"121","endLine":25,"endColumn":22},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"118","severity":1,"message":"119","line":6,"column":8,"nodeType":"120","messageId":"121","endLine":6,"endColumn":16},{"ruleId":"118","severity":1,"message":"122","line":7,"column":75,"nodeType":"120","messageId":"121","endLine":7,"endColumn":78},{"ruleId":"118","severity":1,"message":"134","line":9,"column":10,"nodeType":"120","messageId":"121","endLine":9,"endColumn":17},{"ruleId":"118","severity":1,"message":"135","line":89,"column":9,"nodeType":"120","messageId":"121","endLine":89,"endColumn":25},{"ruleId":"118","severity":1,"message":"134","line":7,"column":10,"nodeType":"120","messageId":"121","endLine":7,"endColumn":17},{"ruleId":"118","severity":1,"message":"119","line":9,"column":8,"nodeType":"120","messageId":"121","endLine":9,"endColumn":16},"@typescript-eslint/no-unused-vars","'chatHttp' is defined but never used.","Identifier","unusedVar","'set' is defined but never used.","'userDetails' is assigned a value but never used.","'setUserDetails' is assigned a value but never used.","'description' is assigned a value but never used.","'setDescription' is assigned a value but never used.","'roomCode' is assigned a value but never used.","'setRoomCode' is assigned a value but never used.","'chatSocket' is assigned a value but never used.","no-native-reassign",["136"],"no-negated-in-lhs",["137"],"'useChat' is defined but never used.","'generateUserList' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]