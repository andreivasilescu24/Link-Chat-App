[{"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/index.js":"1","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/reportWebVitals.js":"2","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/App/index.js":"3","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/constants.ts":"4","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/context/UserContext.tsx":"5","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Signup/index.tsx":"6","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/NotFound/index.tsx":"7","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Login/index.tsx":"8","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Room/index.tsx":"9","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Sidebar/index.tsx":"10","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/NewRoom/index.tsx":"11","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Chat/index.tsx":"12","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/GeneralSnackbar/index.tsx":"13","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/RoomDetails/index.tsx":"14","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ConfirmationDialog/index.tsx":"15","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ChatFooter/index.tsx":"16","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ChatHeader/index.tsx":"17","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarHeader/index.tsx":"18","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarRooms/index.tsx":"19","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ContactDetails/index.tsx":"20","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarContact/index.tsx":"21","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/Auth.tsx":"22","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/utils.tsx":"23"},{"size":460,"mtime":1715546215991,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1715546215991,"results":"26","hashOfConfig":"25"},{"size":1234,"mtime":1716565147684,"results":"27","hashOfConfig":"25"},{"size":1988,"mtime":1716564639186,"results":"28","hashOfConfig":"25"},{"size":416,"mtime":1715546215991,"results":"29","hashOfConfig":"25"},{"size":2938,"mtime":1716564703875,"results":"30","hashOfConfig":"25"},{"size":180,"mtime":1715546215987,"results":"31","hashOfConfig":"25"},{"size":3085,"mtime":1716565232950,"results":"32","hashOfConfig":"25"},{"size":3592,"mtime":1716564689891,"results":"33","hashOfConfig":"25"},{"size":1623,"mtime":1715587227636,"results":"34","hashOfConfig":"25"},{"size":2248,"mtime":1715552319696,"results":"35","hashOfConfig":"25"},{"size":2833,"mtime":1716564540696,"results":"36","hashOfConfig":"25"},{"size":937,"mtime":1715548053110,"results":"37","hashOfConfig":"25"},{"size":3292,"mtime":1716556619644,"results":"38","hashOfConfig":"25"},{"size":1022,"mtime":1715546215987,"results":"39","hashOfConfig":"25"},{"size":1213,"mtime":1715550544009,"results":"40","hashOfConfig":"25"},{"size":683,"mtime":1715547357756,"results":"41","hashOfConfig":"25"},{"size":1682,"mtime":1716556661009,"results":"42","hashOfConfig":"25"},{"size":1272,"mtime":1715550766077,"results":"43","hashOfConfig":"25"},{"size":2578,"mtime":1715587227636,"results":"44","hashOfConfig":"25"},{"size":794,"mtime":1715587227636,"results":"45","hashOfConfig":"25"},{"size":336,"mtime":1716557602768,"results":"46","hashOfConfig":"25"},{"size":174,"mtime":1716555118153,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1u68nf0",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"59"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/index.js",[],["100","101"],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/reportWebVitals.js",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/App/index.js",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/constants.ts",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/context/UserContext.tsx",[],["102","103"],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Signup/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/NotFound/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Login/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Room/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Sidebar/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/NewRoom/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/Chat/index.tsx",["104"],"import { Avatar } from \"@material-ui/core\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport Scrollbar from \"react-scrollbars-custom\";\nimport \"./style.css\";\nimport { MessagePopulated } from \"../../types\";\nimport {\n  parseISO,\n  differenceInCalendarDays,\n  format,\n  formatDistanceToNow,\n} from \"date-fns\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport { useUser } from \"../../context/UserContext\";\nimport ChatHeader from \"../ChatHeader\";\nimport ChatFooter from \"../ChatFooter\";\nimport { messageData } from \"../../constants\";\n\nexport interface ChatProps {\n  roomCode: string;\n}\n\nconst Chat = ({ roomCode }: ChatProps) => {\n  const [messages, setMessages] = useState([] as MessagePopulated[]);\n  const { userDetails } = useUser();\n  const setRef = useCallback((node) => {\n    if (node) {\n      node.scrollIntoView({ smooth: true });\n    }\n  }, []);\n\n  useEffect(() => {\n    setMessages(messageData.filter((msg) => msg.roomCode === roomCode));\n  }, [roomCode]);\n\n  const formatDate = (date: Date) => {\n    return differenceInCalendarDays(new Date(), date) > 2\n      ? format(date, \"EEE MMM d h:m b\")\n      : formatDistanceToNow(date, { addSuffix: true });\n  };\n\n  return (\n    <div className=\"chat\">\n      <ChatHeader\n        roomCode={roomCode}\n        messages={messages}\n        formatDate={formatDate}\n      />\n      <div className=\"chat__body\">\n        <Scrollbar className=\"chat__scrollbar\">\n          <div className=\"chat__main\">\n            {messages.map(({ content, user, createdAt }, i) => {\n              const lastMessage = messages.length - 1 === i;\n              return (\n                <div\n                  className={`chat__block ${\n                    userDetails.username === user.username &&\n                    \"chat__block--sender\"\n                  } ${user.username === \"Chatbot\" && \"chat__block--bot\"}`}\n                  key={i}\n                >\n                  <div className=\"message__block\">\n                    <Avatar>{user.username.charAt(0)}</Avatar>\n                    <p\n                      ref={lastMessage ? setRef : null}\n                      className=\"chat__message\"\n                    >\n                      <span className=\"header__text chat__person\">\n                        {userDetails.username === user.username\n                          ? \"You\"\n                          : user.username}\n                      </span>\n                      {content}\n                    </p>\n                  </div>\n                  <span className=\"chat__timestamp\">\n                    {formatDate(parseISO(createdAt))}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </Scrollbar>\n      </div>\n      <ChatFooter roomCode={roomCode} loggedInUser={userDetails} />\n    </div>\n  );\n};\n\nexport default Chat;\n","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/GeneralSnackbar/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/RoomDetails/index.tsx",["105","106","107"],"import React, { useState } from \"react\";\nimport \"./style.css\";\nimport {\n  Avatar,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport ConfirmationDialog from \"../ConfirmationDialog\";\nimport { useUser } from \"../../context/UserContext\";\nimport PhotoIcon from \"@material-ui/icons/Photo\";\nimport MeetingRoomIcon from \"@material-ui/icons/MeetingRoom\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport GroupIcon from \"@material-ui/icons/Group\";\nimport { RoomPopulated, RoomUserPopulated } from \"../../types\";\n\nexport interface RoomDetailsProps {\n  roomDetails: RoomPopulated;\n  onRoomLeave: (code: string) => void;\n}\n\nfunction RoomDetails({ roomDetails, onRoomLeave }: RoomDetailsProps) {\n  const { code, description, users } = roomDetails;\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState(\"\");\n  const [type, setType] = useState(\"Leave\");\n  const { userDetails } = useUser();\n\n  const openDialog = (type: string) => {\n    setIsOpen(true);\n    setType(type);\n    if (type === \"Leave\") {\n      setContent(\n        \"You will not be able to receive messeges sent in this room anymore. Other users in the room will also be notified when you leave.\"\n      );\n    } else {\n      setContent(\"You will not be able to revert this deletion.\");\n    }\n  };\n\n  const handleModalClose = async (willProceed: boolean) => {\n    try {\n      setIsOpen(false);\n      if (willProceed) {\n        if (type === \"Leave\") {\n          // await chatHttp.leaveRoom({ roomCode: code });\n          onRoomLeave(code);\n        } else {\n          // await chatHttp.deleteRoom({ roomCode: code });\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const generateOptions = () => {\n    const ROOM_OPTIONS = [\n      {\n        label: \"Leave Group\",\n        icon: <MeetingRoomIcon />,\n        adminOnly: false,\n        action: () => openDialog(\"Leave\"),\n      },\n      {\n        label: \"Delete Group\",\n        icon: <DeleteIcon />,\n        adminOnly: true,\n        action: () => openDialog(\"Delete\"),\n      },\n    ];\n    return ROOM_OPTIONS.map(({ label, icon, adminOnly, action }, i) => {\n      return (\n        (!adminOnly ||\n          (adminOnly && users[0].user.username === userDetails.username)) && (\n          <ListItem key={i} button onClick={action}>\n            <ListItemIcon>{icon}</ListItemIcon>\n            <ListItemText primary={label} />\n          </ListItem>\n        )\n      );\n    });\n  };\n\n  const generateUserList = () => {\n    return users.map(({ user }: RoomUserPopulated) => {\n      const { username } = user;\n      return (\n        <ListItem key={username}>\n          <ListItemAvatar>\n            <Avatar>{user.username.charAt(0)}</Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={username} />\n        </ListItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"room__details\">\n      <Avatar className=\"avatar--large\">\n        <GroupIcon />\n      </Avatar>\n      <h1>{code}</h1>\n      <p>{description}</p>\n      <List>{generateOptions()}</List>\n      <ConfirmationDialog\n        open={isOpen}\n        onClose={handleModalClose}\n        content={content}\n      />\n    </div>\n  );\n}\n\nexport default RoomDetails;\n","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ConfirmationDialog/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ChatFooter/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ChatHeader/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarHeader/index.tsx",["108"],"import { Avatar, IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport React from \"react\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport { USER_INITIAL_VALUE } from \"../../constants\";\nimport { useUser } from \"../../context/UserContext\";\nimport \"./style.css\";\nimport { useHistory } from \"react-router-dom\";\n\nexport interface SidebarHeaderProps {\n  history: ReturnType<typeof useHistory>;\n  onNewRoom: () => void;\n}\n\nfunction SidebarHeader({ history, onNewRoom }: SidebarHeaderProps) {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const { userDetails, setUserDetails } = useUser();\n\n  const onLogout = () => {\n    setAnchorEl(null);\n    localStorage.clear();\n    setUserDetails(USER_INITIAL_VALUE);\n    history.push(\"/login\");\n  };\n  return (\n    <div className=\"sidebar__header\">\n      <div className=\"sidebar__headerAvatar\">\n        <Avatar>{userDetails.username.charAt(0)}</Avatar>\n        <p className=\"header__text\">{userDetails.username}</p>\n      </div>\n      <div className=\"sidebar__headerIcons\">\n        <IconButton onClick={onNewRoom}>\n          <ChatIcon />\n        </IconButton>\n        <IconButton onClick={(e) => setAnchorEl(e.currentTarget)}>\n          <MoreVertIcon />\n        </IconButton>\n        <Menu\n          id=\"sidebar-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={() => setAnchorEl(null)}\n        >\n          <MenuItem onClick={onLogout}>Logout</MenuItem>\n        </Menu>\n      </div>\n    </div>\n  );\n}\n\nexport default SidebarHeader;\n","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarRooms/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/ContactDetails/index.tsx",["109","110"],"import React, { useState } from \"react\";\nimport \"./style.css\";\nimport {\n  Avatar,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from \"@material-ui/core\";\nimport ConfirmationDialog from \"../ConfirmationDialog\";\nimport { useUser } from \"../../context/UserContext\";\nimport MeetingRoomIcon from \"@material-ui/icons/MeetingRoom\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport GroupIcon from \"@material-ui/icons/Group\";\nimport { ContactPopulated } from \"../../types\";\n\nexport interface ContactDetailsProps {\n  contactDetails: ContactPopulated;\n  onUnfriend: (username: string) => void;\n  onBlock: (username: string) => void;\n}\n\nfunction ContactDetails({\n  contactDetails,\n  onUnfriend,\n  onBlock,\n}: ContactDetailsProps) {\n  const { username, firstName, lastName, email } = contactDetails;\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState(\"\");\n  const [type, setType] = useState(\"Leave\");\n  const { userDetails } = useUser();\n\n  const openDialog = (type: string) => {\n    setIsOpen(true);\n    setType(type);\n    if (type === \"Unfriend\") {\n      setContent(\n        \"Are you sure you want to unfriend this user? You will not be able to revert this action.\"\n      );\n    } else {\n      setContent(\"Are you sure you want to block this user?\");\n    }\n  };\n\n  const handleModalClose = async (willProceed: boolean) => {\n    try {\n      setIsOpen(false);\n      if (willProceed) {\n        if (type === \"Unfriend\") {\n          onUnfriend(username);\n        } else {\n          onBlock(username);\n        }\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  const generateOptions = () => {\n    const ROOM_OPTIONS = [\n      {\n        label: \"Unfriend\",\n        icon: <MeetingRoomIcon />,\n        action: () => openDialog(\"Leave\"),\n      },\n      {\n        label: \"Block\",\n        icon: <DeleteIcon />,\n        action: () => openDialog(\"Delete\"),\n      },\n    ];\n    return ROOM_OPTIONS.map(({ label, icon, action }, i) => {\n      return (\n        <ListItem key={i} button onClick={action}>\n          <ListItemIcon>{icon}</ListItemIcon>\n          <ListItemText primary={label} />\n        </ListItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"room__details\">\n      <Avatar className=\"avatar--large\">\n        <GroupIcon />\n      </Avatar>\n      <h1>{username}</h1>\n      <p>{firstName + \" \" + lastName}</p>\n      <List>{generateOptions()}</List>\n      <ConfirmationDialog\n        open={isOpen}\n        onClose={handleModalClose}\n        content={content}\n      />\n    </div>\n  );\n}\n\nexport default ContactDetails;\n","/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/components/SidebarContact/index.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/Auth.tsx",[],"/home/ionutgaina/Desktop/Personal/An3/sem2/IP/Link/frontend/src/services/utils.tsx",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":12,"column":8,"nodeType":"117","messageId":"118","endLine":12,"endColumn":18},{"ruleId":"115","severity":1,"message":"119","line":13,"column":8,"nodeType":"117","messageId":"118","endLine":13,"endColumn":17},{"ruleId":"115","severity":1,"message":"116","line":16,"column":8,"nodeType":"117","messageId":"118","endLine":16,"endColumn":18},{"ruleId":"115","severity":1,"message":"120","line":88,"column":9,"nodeType":"117","messageId":"118","endLine":88,"endColumn":25},{"ruleId":"115","severity":1,"message":"116","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":18},{"ruleId":"115","severity":1,"message":"121","line":28,"column":42,"nodeType":"117","messageId":"118","endLine":28,"endColumn":47},{"ruleId":"115","severity":1,"message":"122","line":32,"column":11,"nodeType":"117","messageId":"118","endLine":32,"endColumn":22},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"@typescript-eslint/no-unused-vars","'PersonIcon' is defined but never used.","Identifier","unusedVar","'PhotoIcon' is defined but never used.","'generateUserList' is assigned a value but never used.","'email' is assigned a value but never used.","'userDetails' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]